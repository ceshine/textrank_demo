<!DOCTYPE html>
<html lang="en">
<head>

  <!-- Basic Page Needs
  –––––––––––––––––––––––––––––––––––––––––––––––––– -->
  <meta charset="utf-8">
  <title>Demo Page for TextRank Algorithm</title>
  <meta name="description" content="">
  <meta name="author" content="">

  <!-- Mobile Specific Metas
  –––––––––––––––––––––––––––––––––––––––––––––––––– -->
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- FONT
  –––––––––––––––––––––––––––––––––––––––––––––––––– -->
  <link href="https://fonts.googleapis.com/css?family=Raleway:400,300,600" rel="stylesheet" type="text/css">

  <!-- CSS
  –––––––––––––––––––––––––––––––––––––––––––––––––– -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/skeleton/2.0.4/skeleton.css">

  <!-- Javascript
  –––––––––––––––––––––––––––––––––––––––––––––––––– -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cytoscape/3.2.22/cytoscape.js"></script>

  <!-- Favicon
  –––––––––––––––––––––––––––––––––––––––––––––––––– -->
  <link rel="icon" type="image/png" href="static/images/favicon.png">
  <style>
      #cy {
          height: 500px;
          top: 0px;
          left: 0px;
      }
      #cy-word {
          height: 750px;
          top: 0px;
          left: 0px;
      }
      #tip {
        margin-top: 100px;
      }
  </style>

</head>
<body>
  <!-- Primary Page Layout
  –––––––––––––––––––––––––––––––––––––––––––––––––– -->
  <div class="container">
    <div class="row" style="margin-top: 10%">
      <div class="two-third column"><h1>Simple TextRank Demo</h1></div>
    </div>
    <div class="row">
      <div class="eight columns" style="padding-top: 2%">
        <h4>Source Article <span style="font-size: 1.5rem">(English/中文/日本語)<span></h4>
        <form action="/" method="POST">
            <textarea class="u-full-width" placeholder="Paste article here..." id="exampleMessage" name="text" style="height:400px">{{ text }}</textarea>
            <div class="row">
              <div class="five columns">
                <label for="metricInput">Similarity Model</label>
                <select class="u-full-width" name="metricInput" id="metricInput">
                  <option value="textrank" {% if metricInput == 'textrank' %}selected{% endif %}>Textrank Original</option>
                  <option value="distilbert-base-nli-stsb" {% if metricInput == 'distilbert-base-nli-stsb' %}selected{% endif %}>
                    distilbert-base-nli-stsb (En)
                  </option>
                  {# <option value="use-base" {% if metricInput == 'use-base' %}selected{% endif %} >USE Base</option>
                  <option value="use-large" {% if metricInput == 'use-large' %}selected{% endif %}>USE Large</option>
                  <option value="use-xling" {% if metricInput == 'use-xling' %}selected{% endif %}>USE Xling</option> #}
                </select>
              </div>
              <div class="four columns">
                # of sentences to highlight: <input class="u-full-width" type="text" name="n_sentences" value="{{ n_sentences }}">
              </div>
              <div class="three columns">
                # of keywords: <input class="u-full-width" type="text" name="n_keywords" value="{{ n_keywords }}">
              </div>
            </div>
            <input class="button-primary" type="submit" value="Submit">
        </form>
      </div>
      <div class="four columns" style="padding-top: 2%">
        <h4>Statistics</h4>
        <ul>
        {% for entry in stats %}
          <li>{{ entry[0] }}: {{ entry[1] | safe }}</li>
        {% endfor %}
        </ul>
        <h4>Keywords</h4>
        <ol>
        {% for entry in keywords %}
          <li>{{ entry }}</li>
        {% endfor %}
        </ol>
      </div>
    </div>
    <div class="row">
      <div class="twelve columns"style="padding-top: 2%">
          <h4>Results</h4>
          {% for sentences in paragraphs %}
          <p>
            {% for sent in sentences %}
              <span style="background-color: rgba(255, 255, 75, {{ sent.alpha }});">{{ sent.text }}</span>
            {% endfor %}
          </p>
          {% endfor %}
      </div>
    </div>
    <div class="row" id="network">
      <div class="nine columns" style="padding-top: 2%">
          <h4>Sentence Network</h4>
          <div id="cy"></div>
      </div>
      <div class="three columns" id="tip">
        Click on a node to show details.
      </div>
    </div>
    <div class="row" id="word-network">
      <div class="twelve columns" style="padding-top: 2%">
          <h4>Word Network</h4>
          <div id="word-info">Click on a node to show word information.</div>
          <div id="cy-word"></div>
      </div>
    </div>
    <div class="row">
      <div class="twelve columns" style="padding-top: 2%; padding-bottom: 5%;">
        <b>Built by <a href="https://blog.ceshine.net">CeShine Lee</a>, based on TextRank implementation <a href="https://github.com/summanlp/textrank">summanlp/textrank</a>.</b>
      </div>
    </div>
  </div>
{% if text %}
<script>
  var cy = cytoscape({
    container: document.getElementById('cy'), // container to render in

    elements: [ // list of graph elements to start with
      {% for i in range(n_nodes) %}
      { // node a
        data: {
          id: 'n{{ i }}',
          label: 'P {{ node_mapping[i][1] + 1 }} S {{ node_mapping[i][2] + 1}}',
          paragraph: '{{ node_mapping[i][1] + 1 }}',
          sentence: '{{ node_mapping[i][2] + 1}}',
          score: '{{ node_mapping[i][3] }}',
          transformed_score: '{{ node_mapping[i][4] }}',
          name: '{{node_mapping[i][0].strip().replace("\'", "\\\'") | safe}}'
        }
      },
      {% endfor %}
      {% for edge in edges %}
      { // edge ab
        data: { id: 'n{{edge[0]}}_n{{edge[1]}}', source: 'n{{edge[0]}}', target: 'n{{edge[1]}}', weight: '{{edge[2]}}' }
      },
      {% endfor %}
    ],

    style: [ // the stylesheet for the graph
      {
        selector: 'node',
        style: {
          'background-color': '#666',
          'label': 'data(label)',
          'width': 'data(transformed_score)',
          'height': 'data(transformed_score)'
        }
      },

      {
        selector: 'edge',
        style: {
          'width': 'data(weight)',
          'line-color': '#ccc'
        }
      }
    ],

    layout: {
      name: 'concentric',
      fit: true, // whether to fit the viewport to the graph
      padding: 10, // the padding on fit
      startAngle: 3 / 2 * Math.PI, // where nodes start in radians
      sweep: undefined, // how many radians should be between the first and last node (defaults to full circle)
      clockwise: true, // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)
      equidistant: false, // whether levels have an equal radial distance betwen them, may cause bounding box overflow
      minNodeSpacing: 30, // min spacing between outside of nodes (used for radius adjustment)
      boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
      avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space
      nodeDimensionsIncludeLabels: false, // Excludes the label when calculating node bounding boxes for the layout algorithm
      height: undefined, // height of layout area (overrides container height)
      width: undefined, // width of layout area (overrides container width)
      spacingFactor: 2, // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
    }
  });
  cy.zoomingEnabled(false);

  cy.on('tap', 'node', function (evt) {
      console.log(evt.target.data());
      var data = evt.target.data();
      document.getElementById('tip').innerHTML = (
        "<b>Paragraph " + data['paragraph'] + " Sentence "+ data['sentence'] + "</b><br/>" +
        "Score: " + data['score'] + " Adjusted: " + data['transformed_score'] + "<br/>" +
        data["name"]
      );
  });
</script>

<script>
  var cyWord = cytoscape({
    container: document.getElementById('cy-word'), // container to render in

    elements: [ // list of graph elements to start with
      {% for i in word_node_mapping.keys() %}
      { // node a
        data: {
          id: 'w{{ i }}',
          label: '{{ word_node_mapping[i][0] }}',
          score: '{{ word_node_mapping[i][1] }}',
          transformed_score: '{{ word_node_mapping[i][2] }}'
        }
      },
      {% endfor %}
      {% for edge in word_edges %}
      { // edge ab
        data: { id: 'w{{edge[0]}}_w{{edge[1]}}', source: 'w{{edge[0]}}', target: 'w{{edge[1]}}' }
      },
      {% endfor %}
    ],

    style: [ // the stylesheet for the graph
      {
        selector: 'node',
        style: {
          'background-color': '#666',
          'label': 'data(label)',
          'width': 'data(transformed_score)',
          'height': 'data(transformed_score)'
        }
      },

      {
        selector: 'edge',
        style: {
          'width': 1.25,
          'line-color': '#ccc'
        }
      }
    ],

    layout: {
      name: 'concentric',
      fit: true, // whether to fit the viewport to the graph
      padding: 10, // the padding on fit
      startAngle: 3 / 2 * Math.PI, // where nodes start in radians
      sweep: undefined, // how many radians should be between the first and last node (defaults to full circle)
      clockwise: true, // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)
      equidistant: false, // whether levels have an equal radial distance betwen them, may cause bounding box overflow
      minNodeSpacing: 10, // min spacing between outside of nodes (used for radius adjustment)
      boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
      avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space
      nodeDimensionsIncludeLabels: false, // Excludes the label when calculating node bounding boxes for the layout algorithm
      height: undefined, // height of layout area (overrides container height)
      width: undefined, // width of layout area (overrides container width)
      spacingFactor: 2.5, // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
    }
  });
  cyWord.zoomingEnabled(false);
  cyWord.on('tap', 'node', function (evt) {
      console.log(evt.target.data());
      var data = evt.target.data();
      document.getElementById('word-info').innerHTML = (
        "Word: <b>" + data['label'] + "</b> " +
        "Score: <b>" + data['score'] + "</b> Adjusted: <b>" + data['transformed_score'] + "</b>"
      );
  });
</script>
{% endif %}
<!-- End Document
  –––––––––––––––––––––––––––––––––––––––––––––––––– -->
</body>
</html>

